{
    "pipes": [
        {
            "name": "NumberFormat",
            "id": "pipe-NumberFormat-805fd370fb0ce755c39f1efd4220c84b",
            "file": "projects/ng-number-input-format/src/lib/number-format.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "numberFormat",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'numberFormat'\n})\nexport class NumberFormat implements PipeTransform {\n    public transform(value: any, ...args: any[]) {\n        return 'hi';\n    }\n\n}\n"
        }
    ],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [
        {
            "name": "NgNumberInputFormatDirective",
            "id": "directive-NgNumberInputFormatDirective-e60feca3a6828e3092e05a02eb4df225",
            "file": "projects/ng-number-input-format/src/lib/ng-number-input-format.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterContentInit, Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport * as Autonumeric from 'autonumeric';\n@Directive({\n  selector: 'input[ngNumberInputFormatDirective]'\n})\nexport class NgNumberInputFormatDirective implements AfterContentInit {\n\n  @Input()\n  public set value(v) {\n    this.numval = v;\n    if (this.isFocus) {\n      const currentRawValueToFloat = this.parseFloat(this.rawValue);\n      if (v !== currentRawValueToFloat) {\n        this.elementRef.nativeElement.value = this.numval + '';\n      }\n    } else {\n      this.elementRef.nativeElement.value = Autonumeric.format.bind(Autonumeric)(this.value, {});\n    }\n  }\n  public get value() {\n    return this.numval;\n  }\n\n\n\n  constructor(\n    protected elementRef: ElementRef<HTMLInputElement>,\n  ) { }\n  private get selectionStart() {\n    return this.elementRef.nativeElement.selectionStart;\n  }\n  private get selectionEnd() {\n    return this.elementRef.nativeElement.selectionEnd;\n  }\n\n  private get rawValue(): string {\n    return this.elementRef.nativeElement.value || '';\n  }\n\n  private get isIntegerIsLimit() {\n    const s = this.rawValue.split('.');\n    return s[0].length === 13;\n  }\n\n  private get isDecimalIsLimit() {\n    const s = this.rawValue.split('.');\n    if (s.length < 2) {\n      return false;\n    }\n    return s[1].length === 2;\n  }\n\n  private get isDecimalExists() {\n    return this.rawValue.split('.').length > 1;\n  }\n\n\n  private numval = 0;\n\n  @Output()\n  public readonly valueChange = new EventEmitter<number>();\n  private isFocus = false;\n\n  public ngAfterContentInit() {\n    /**\n     * force format input value after\n     * directive is mounted\n     * at the first time in angular life cycle\n     * this will allowed our directive can be work with\n     * another directive eg. matInput\n     */\n    this.handleHostListenerBlur();\n  }\n\n  private parseFloat(value: string) {\n    return parseFloat(value.replace(/,/g, ''));\n  }\n  private isDecimalPosition(evt: KeyboardEvent) {\n    const pos = this.selectionStart;\n    const poe = this.selectionEnd;\n    const dotPos = this.rawValue.split('').findIndex(v => v === '.');\n    if (dotPos < 0) {\n      return false;\n    }\n    return pos > dotPos && poe > dotPos;\n  }\n\n  private isNumberInput(evt: KeyboardEvent) {\n    return evt.key.length === 1 && /[0-9\\.-]/.test(evt.key);\n  }\n\n  private handleLimitNumberInput() {\n    const integer = this.value.toString().split('.')[0];\n    const decimal = this.value.toString().split('.')[1];\n\n    this.value = this.parseFloat(integer.substring(0, 13) + '.' + decimal);\n  }\n\n  @HostListener('keydown', ['$event'])\n  public handleHostListenerKeydown(evt: KeyboardEvent) {\n    if (this.isNumberInput(evt)) {\n\n      if (!this.isDecimalPosition(evt) && this.isIntegerIsLimit && evt.key !== '.' && this.selectionStart === this.selectionEnd) {\n        /**\n         * block input if amount length is max but if\n         * cursor of user select more than 1 characters we will allow\n         * user to be able to replace value\n         */\n        evt.preventDefault();\n        return false;\n      }\n\n      if (this.isDecimalExists && evt.key === '.') {\n        evt.preventDefault();\n        return false;\n      }\n\n      if (this.isDecimalPosition(evt) && this.isDecimalIsLimit && this.selectionEnd === this.rawValue.length) {\n        evt.preventDefault();\n        return false;\n      }\n\n      /**\n       * replace number after decimal point if\n       * current value have 2 percision point\n       * and user try to input number before these 2 numbers (after decimal point)\n       */\n      if (this.isDecimalPosition(evt) && this.isDecimalIsLimit) {\n        const start = this.selectionStart;\n        const end = this.selectionEnd;\n        const x = this.rawValue.substring(0, this.selectionEnd);\n        const xx = this.rawValue.substring(this.selectionEnd + 1, this.rawValue.length);\n        const nextval = x + xx;\n        this.elementRef.nativeElement.value = nextval;\n        this.elementRef.nativeElement.selectionStart = start;\n        this.elementRef.nativeElement.selectionEnd = end;\n      }\n    } else {\n      if (evt.key.length === 1 && !evt.altKey && !evt.ctrlKey && !evt.metaKey) {\n        evt.preventDefault();\n        return false;\n      }\n    }\n  }\n\n  @HostListener('input', ['$event'])\n  public handleHostListenerInput(evt: InputEvent) {\n    if (this.rawValue.length === 0) {\n      /**\n       * for empty input value we will\n       * treat it as empty value ( zero )\n       * but only when user lost focus from input box only\n       */\n      this.valueChange.emit(0);\n      this.value = 0;\n    }\n\n    // if number start '.' or '.0' will not parseFloat\n    if (/.*\\.$/.test(this.rawValue) || /.*(\\.0)$/.test(this.rawValue)) {\n\n    } else {\n      let val = this.parseFloat(this.rawValue);\n      if (isNaN(val)) {\n        val = 0;\n      }\n\n      this.valueChange.emit(val);\n      this.value = val;\n    }\n\n  }\n\n  @HostListener('keyup', ['$event'])\n  public handleHostListenerKeyup(evt: KeyboardEvent) {\n    if (this.isNumberInput(evt)) {\n    }\n  }\n\n  @HostListener('blur')\n  public handleHostListenerBlur() {\n    this.isFocus = false;\n    this.handleLimitNumberInput();\n    this.elementRef.nativeElement.value = Autonumeric.format.bind(Autonumeric)(this.value, {});\n  }\n\n  @HostListener('focus')\n  public handleHostListenerFocus() {\n    this.isFocus = true;\n    let val = this.parseFloat(this.rawValue);\n    if (isNaN(val)) {\n      val = 0;\n    }\n    this.elementRef.nativeElement.value = val + '';\n    this.elementRef.nativeElement.select();\n  }\n}\n",
            "selector": "input[ngNumberInputFormatDirective]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "value",
                    "line": 9
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 61,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "line": 180
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "line": 187
                },
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "evt",
                            "type": "InputEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 147
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 100
                },
                {
                    "name": "keyup",
                    "args": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 174
                }
            ],
            "propertiesClass": [
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "numval",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleLimitNumberInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isDecimalPosition",
                    "args": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNumberInput",
                    "args": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "parseFloat",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLInputElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 9,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                },
                "selectionStart": {
                    "name": "selectionStart",
                    "getSignature": {
                        "name": "selectionStart",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "selectionEnd": {
                    "name": "selectionEnd",
                    "getSignature": {
                        "name": "selectionEnd",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                },
                "rawValue": {
                    "name": "rawValue",
                    "getSignature": {
                        "name": "rawValue",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                },
                "isIntegerIsLimit": {
                    "name": "isIntegerIsLimit",
                    "getSignature": {
                        "name": "isIntegerIsLimit",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "isDecimalIsLimit": {
                    "name": "isDecimalIsLimit",
                    "getSignature": {
                        "name": "isDecimalIsLimit",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "isDecimalExists": {
                    "name": "isDecimalExists",
                    "getSignature": {
                        "name": "isDecimalExists",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "NestedComponent",
            "id": "component-NestedComponent-474c154de93202cca087e52d72affd0d",
            "file": "stories/ng-number-input-format.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\">\n  <input matInput ngNumberInputFormatDirective [(value)]=\"value\" />\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "{\n    amount: 2012000\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { Meta, moduleMetadata, Story } from '@storybook/angular';\n// also exported from '@storybook/angular' if you can deal with breaking changes in 6.1\n// import { NgNumberInputFormatComponent, NgNumberInputFormatModule } from 'ng-number-input-format';\nimport { NgNumberInputFormatComponent, NgNumberInputFormatModule } from 'projects/ng-number-input-format/src/public-api';\n\n\nexport default {\n  title: 'Example/NgNumberInputFormat',\n  decorators: [\n    moduleMetadata({\n      declarations: [\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        CommonModule, NgNumberInputFormatModule,\n        MatInputModule, MatFormFieldModule,\n        FormsModule,\n      ],\n    }),\n  ],\n} as Meta;\n\nconst Template: Story<NgNumberInputFormatComponent> = (args: NgNumberInputFormatComponent) => ({\n  props: args,\n  template: `\n    <ng-number-input-format #input [disabled]=\"disabled\" [(value)]=\"value\" [readonly]=\"readonly\"></ng-number-input-format>\n    {{value}}\n    {{input.typeof}}\n\n    <button (click)=\"value = 20123.33\">set value to 20123.33</button>\n    <button (click)=\"value=value+301.21\">add 301.21</button>\n\n    <ng-number-input-format #dd></ng-number-input-format>\n    {{dd.value}}\n    {{'12000' | numberFormat}}\n  `,\n});\n\nexport const Empty = Template.bind({}, { value: 0.00 });\nexport const TwoWayBinding = Template.bind({}, { value: 10.12 });\nexport const SetValue = Template.bind({});\nexport const Readonly = Template.bind({}, { readonly: true, value: 10.312, });\nexport const Disabled = Template.bind({}, { disabled: true });\nexport const DisabledWithValue = Template.bind({}, { disabled: true, value: 2000.33 });\nexport const MaximumValue = Template.bind({}, { value: 1234567890123.33 });\n\n@Component({\n  template: `\n  <mat-form-field appearance=\"fill\">\n    <input matInput ngNumberInputFormatDirective [(value)]=\"value\" />\n  </mat-form-field>\n  `,\n})\nclass NestedComponent {\n  public data = {\n    amount: 2012000\n  };\n  public get value() {\n    return this.data.amount;\n  }\n  public set value(v) {\n    this.data.amount = v;\n  }\n}\nconst TemplateWithNestedComponent: Story<NestedComponent> = (() => ({\n  props: {},\n  component: NestedComponent,\n}));\nexport const withNestedMaterialUI = TemplateWithNestedComponent.bind({}, );\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                }
            }
        },
        {
            "name": "NgNumberInputFormatComponent",
            "id": "component-NgNumberInputFormatComponent-03ff29831b0a96c347dbf2008f6f3af3",
            "file": "projects/ng-number-input-format/src/lib/ng-number-input-format.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ng-number-input-format",
            "styleUrls": [],
            "styles": [],
            "template": "<input ngNumberInputFormatDirective [value]=\"value\" (valueChange)=\"valueChange.emit($event)\" [disabled]=\"disabled\" [readOnly]=\"readonly\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "line": 24
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "numberInputDirective",
                    "type": "NgNumberInputFormatDirective",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgNumberInputFormatDirective"
                        }
                    ],
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { NgNumberInputFormatDirective } from './ng-number-input-format.directive';\n@Component({\n  selector: 'ng-number-input-format',\n  template: `<input ngNumberInputFormatDirective [value]=\"value\" (valueChange)=\"valueChange.emit($event)\" [disabled]=\"disabled\" [readOnly]=\"readonly\" />`,\n  styles: [\n  ]\n})\nexport class NgNumberInputFormatComponent implements OnInit {\n\n  public get typeof() {\n    return typeof this.value;\n  }\n\n  @ViewChild(NgNumberInputFormatDirective)\n  public readonly numberInputDirective: NgNumberInputFormatDirective;\n\n  constructor() { }\n\n  @Input()\n  public readonly = false;\n\n  @Input()\n  public value = 0;\n\n  @Input()\n  public disabled = false;\n\n  @Output()\n  public readonly valueChange = new EventEmitter<number>();\n\n\n  public ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "typeof": {
                    "name": "typeof",
                    "getSignature": {
                        "name": "typeof",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "NgNumberInputFormatModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgNumberInputFormatComponent"
                        },
                        {
                            "name": "NgNumberInputFormatDirective"
                        },
                        {
                            "name": "NumberFormat"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgNumberInputFormatComponent"
                        },
                        {
                            "name": "NgNumberInputFormatDirective"
                        },
                        {
                            "name": "NumberFormat"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-number-input-format/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { disabled: true })"
            },
            {
                "name": "DisabledWithValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { disabled: true, value: 2000.33 })"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { value: 0.00 })"
            },
            {
                "name": "MaximumValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { value: 1234567890123.33 })"
            },
            {
                "name": "Readonly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { readonly: true, value: 10.312, })"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-number-input-format/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SetValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "Story<NgNumberInputFormatComponent>",
                "defaultValue": "(args: NgNumberInputFormatComponent) => ({\n  props: args,\n  template: `\n    <ng-number-input-format #input [disabled]=\"disabled\" [(value)]=\"value\" [readonly]=\"readonly\"></ng-number-input-format>\n    {{value}}\n    {{input.typeof}}\n\n    <button (click)=\"value = 20123.33\">set value to 20123.33</button>\n    <button (click)=\"value=value+301.21\">add 301.21</button>\n\n    <ng-number-input-format #dd></ng-number-input-format>\n    {{dd.value}}\n    {{'12000' | numberFormat}}\n  `,\n})"
            },
            {
                "name": "TemplateWithNestedComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "Story<NestedComponent>",
                "defaultValue": "(() => ({\n  props: {},\n  component: NestedComponent,\n}))"
            },
            {
                "name": "TwoWayBinding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({}, { value: 10.12 })"
            },
            {
                "name": "withNestedMaterialUI",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/ng-number-input-format.stories.ts",
                "type": "",
                "defaultValue": "TemplateWithNestedComponent.bind({}, )"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/ng-number-input-format/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-number-input-format/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-number-input-format/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/ng-number-input-format.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { disabled: true })"
                },
                {
                    "name": "DisabledWithValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { disabled: true, value: 2000.33 })"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { value: 0.00 })"
                },
                {
                    "name": "MaximumValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { value: 1234567890123.33 })"
                },
                {
                    "name": "Readonly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { readonly: true, value: 10.312, })"
                },
                {
                    "name": "SetValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "Story<NgNumberInputFormatComponent>",
                    "defaultValue": "(args: NgNumberInputFormatComponent) => ({\n  props: args,\n  template: `\n    <ng-number-input-format #input [disabled]=\"disabled\" [(value)]=\"value\" [readonly]=\"readonly\"></ng-number-input-format>\n    {{value}}\n    {{input.typeof}}\n\n    <button (click)=\"value = 20123.33\">set value to 20123.33</button>\n    <button (click)=\"value=value+301.21\">add 301.21</button>\n\n    <ng-number-input-format #dd></ng-number-input-format>\n    {{dd.value}}\n    {{'12000' | numberFormat}}\n  `,\n})"
                },
                {
                    "name": "TemplateWithNestedComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "Story<NestedComponent>",
                    "defaultValue": "(() => ({\n  props: {},\n  component: NestedComponent,\n}))"
                },
                {
                    "name": "TwoWayBinding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({}, { value: 10.12 })"
                },
                {
                    "name": "withNestedMaterialUI",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/ng-number-input-format.stories.ts",
                    "type": "",
                    "defaultValue": "TemplateWithNestedComponent.bind({}, )"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ng-number-input-format/src/lib/ng-number-input-format.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgNumberInputFormatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/lib/ng-number-input-format.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgNumberInputFormatDirective",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/lib/number-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "NumberFormat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-number-input-format/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "NestedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledWithValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaximumValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Readonly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateWithNestedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TwoWayBinding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/ng-number-input-format.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withNestedMaterialUI",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}